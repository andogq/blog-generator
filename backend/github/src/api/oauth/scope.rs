pub enum Scope {
    Repo,
    RepoStatus,
    RepoDeployment,
    PublicRepo,
    RepoInvite,
    SecurityEvents,
    AdminRepoHook,
    WriteRepoHook,
    ReadRepoHook,
    AdminOrg,
    WriteOrg,
    ReadOrg,
    AdminPublicKey,
    WritePublicKey,
    ReadPublicKey,
    AdminOrgHook,
    Gist,
    Notifications,
    User,
    ReadUser,
    UserEmail,
    UserFollow,
    Project,
    ReadProject,
    DeleteRepo,
    WritePackages,
    ReadPackages,
    DeletePackages,
    AdminGpgKey,
    WriteGpgKey,
    ReadGpgKey,
    Codespace,
    Workflow,
}

impl From<&Scope> for String {
    fn from(scope: &Scope) -> Self {
        match scope {
            Scope::Repo => "repo",
            Scope::RepoStatus => "repo:status",
            Scope::RepoDeployment => "repo_deployment",
            Scope::PublicRepo => "public_repo",
            Scope::RepoInvite => "repo:invite",
            Scope::SecurityEvents => "security_events",
            Scope::AdminRepoHook => "admin:repo_hook",
            Scope::WriteRepoHook => "write:repo_hook",
            Scope::ReadRepoHook => "read:repo_hook",
            Scope::AdminOrg => "admin:org",
            Scope::WriteOrg => "write:org",
            Scope::ReadOrg => "read:org",
            Scope::AdminPublicKey => "admin:public_key",
            Scope::WritePublicKey => "write:public_key",
            Scope::ReadPublicKey => "read:public_key",
            Scope::AdminOrgHook => "admin:org_hook",
            Scope::Gist => "gist",
            Scope::Notifications => "notifications",
            Scope::User => "user",
            Scope::ReadUser => "read:user",
            Scope::UserEmail => "user:email",
            Scope::UserFollow => "user:follow",
            Scope::Project => "project",
            Scope::ReadProject => "read:project",
            Scope::DeleteRepo => "delete_repo",
            Scope::WritePackages => "write:packages",
            Scope::ReadPackages => "read:packages",
            Scope::DeletePackages => "delete:packages",
            Scope::AdminGpgKey => "admin:gpg_key",
            Scope::WriteGpgKey => "write:gpg_key",
            Scope::ReadGpgKey => "read:gpg_key",
            Scope::Codespace => "codespace",
            Scope::Workflow => "workflow",
        }
        .to_string()
    }
}
